# SEARCHING in sorted list/array 
# Binary Search Recursive
def bs_recursive(nums, element, left, right):
    if right>=left:    
        mid = left + (right-left)//2
        if nums[mid] == element:
            return mid
        if nums[mid] < element:    
            return bs_recursive(nums, element, mid+1, right)
        return bs_recursive(nums, element, left, mid-1)
    return-1    

def bs(nums, element):
    left, right = 0, len(nums)-1
    while(left<=right):
        mid = left + (right-left)//2
        if nums[mid] == element:
            return mid
        elif nums[mid] < element:
            left = mid+1
        else: 
            right = mid-1
    return -1        
            
nums = [1,3,4,5,7,9,10,13,14]
element = 13
#print(bs_recursive(nums, element, 0, len(nums)-1))
#print(bs(nums, element))


# SORTING

def bubble(arr):
    flag = 0
    for i in range(len(arr)-1):
        for j in range(len(arr)-1-i):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
                flag = 1
        if flag == 0:
            break
    return arr    
    
def selection(arr):
    for i in range(len(arr)-1):
        min = i
        for j in range(i+1, len(arr)):
            if arr[j] < arr[min]:
                min = j
                
        if min != i:
            arr[min], arr[i] = arr[i], arr[min]
    
    return arr    
    
def insertion(arr):
    for i in range(1, len(arr)):
        value_to_sort = arr[i]
        while arr[i-1] > value_to_sort and i>0:
            arr[i-1], arr[i] = arr[i], arr[i-1]
            i = i-1
    return arr
    
    
#arr = [64, 34, 25, 12, 22, 11, 90]    
#print(insertion(arr))    
import random

def quick(arr):
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr.pop()
    
    left_array = []
    right_array = []
    
    for item in arr:
        if item < pivot:
            left_array.append(item)
        else:
            right_array.append(item)
    
    return quick(left_array)+[pivot]+quick(right_array)

#arr = [12,12,12,12, 12, 22, 11, 90] 
#print(quick(arr))


# Quick Sorrt basic method (pivot is random here)

import random

def partition(arr, left, right):
  if len(arr)>1:
    index = random.randint(left, right)
    if arr[index] != arr[right]: 
      arr[index], arr[right] = arr[right], arr[index]   
  
  i = left-1
  pivot = arr[right]
  
  for j in range(left, right):
    if arr[j] < pivot:
      i+=1
      arr[i], arr[j] = arr[j], arr[i]

  arr[i+1], arr[right] = arr[right], arr[i+1]
  return i+1

def quicksort(arr, left, right):
  if len(arr) <=1:
    return arr
  if left<right:
    pi = partition(arr, left, right)

    quicksort(arr, left, pi-1)
    quicksort(arr, pi+1, right)

arr = [10, 7, 8, 9, 1, 5] 
n = len(arr) 
quicksort(arr, 0, n-1)
print(arr) 


## Find k largest element in unsorted array O(n)- Quickselect
import random

def partition(arr, left, right):
  if len(arr)>1:
    index = random.randint(left, right)
    if arr[index] != arr[right]: 
      arr[index], arr[right] = arr[right], arr[index]   
  
  i = left-1
  pivot = arr[right]
  
  for j in range(left, right):
    if arr[j] < pivot:
      i+=1
      arr[i], arr[j] = arr[j], arr[i]

  arr[i+1], arr[right] = arr[right], arr[i+1]
  return i+1

def quicksort(arr, left, right, k):
    while left < right:
        pi = partition(arr, left, right)
        if pi == k:
            break
        elif pi < k:
            left = pi+1
        else:
            right = pi-1  
            
    return arr[k]          
          
          
arr = [10, 7, 8, 9, 1, 5] 
n = len(arr) 
k = 1
print(quicksort(arr, 0, n-1, k-1))
